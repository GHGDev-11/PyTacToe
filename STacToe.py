class G: pass
(lambda __print, __types, __operator, __g, __y: [[(Game(), None)[1] for __g['Game'] in [((lambda d: d.get('__metaclass__', __g.get('__metaclass__', type(G)))('Game', (), d))((lambda __l: [[[[__l for __l['start'], __l['start'].__name__ in [(lambda self: (lambda __l: [(lambda __items, __sentinel, __after: __y(lambda __this: lambda: (lambda __i: [(lambda __after: [__after() for __l['self'].player in [(__l['self'].players[1])]][0] if ((__l['i'] % 2) == 0) else [__after() for __l['self'].player in [(__l['self'].players[2])]][0])(lambda: (__print((("It's your turn, " + __l['self'].player) + '!')), [(lambda __after: [(__l['self'].drawBoard(), (__print(''), (lambda __target: [(lambda __after: (__print((('Player ' + __l['self'].player) + ' won!')), (__l['self'].restart(), __after())[1])[1] if (((__l['self'].board[1] == __l['self'].board[2]) and (__l['self'].board[1] == __l['self'].board[3]) and (__l['self'].board[1] != ' ')) or ((__l['self'].board[4] == __l['self'].board[5]) and (__l['self'].board[4] == __l['self'].board[6]) and (__l['self'].board[4] != ' ')) or ((__l['self'].board[7] == __l['self'].board[8]) and (__l['self'].board[7] == __l['self'].board[9]) and (__l['self'].board[7] != ' ')) or ((__l['self'].board[1] == __l['self'].board[4]) and (__l['self'].board[1] == __l['self'].board[7]) and (__l['self'].board[1] != ' ')) or ((__l['self'].board[2] == __l['self'].board[5]) and (__l['self'].board[2] == __l['self'].board[8]) and (__l['self'].board[2] != ' ')) or ((__l['self'].board[3] == __l['self'].board[6]) and (__l['self'].board[3] == __l['self'].board[9]) and (__l['self'].board[3] != ' ')) or ((__l['self'].board[1] == __l['self'].board[5]) and (__l['self'].board[1] == __l['self'].board[9]) and (__l['self'].board[1] != ' ')) or ((__l['self'].board[7] == __l['self'].board[5]) and (__l['self'].board[7] == __l['self'].board[3]) and (__l['self'].board[7] != ' '))) else __after())(lambda: (lambda __after: (__print('Game over. No one won.'), (__l['self'].restart(), __after())[1])[1] if (len(__l['self'].moves) == 9) else __after())(lambda: __after())) for __target.moves in [(__operator.iadd(__target.moves, __l['move']))]][0])(__l['self']))[1])[1] for __l['self'].board[int(__l['move'])] in [(__l['self'].player)]][0] if (__l['move'] not in __l['self'].moves) else (__print('That spot is already taken!'), __after())[1])(lambda: __this()) for __l['move'] in [(input('> '))]][0])[1]) for __l['i'] in [(__i)]][0] if __i is not __sentinel else __after())(next(__items, __sentinel)))())(iter(range(10)), [], lambda: None) for __l['self'] in [(self)]][0])({}), 'start')]][0] for __l['drawBoard'], __l['drawBoard'].__name__ in [(lambda self: (lambda __l: [(__print(((((((((((((((((__l['self'].board[1] + '|') + __l['self'].board[2]) + '|') + __l['self'].board[3]) + '\n-+-+-\n') + __l['self'].board[4]) + '|') + __l['self'].board[5]) + '|') + __l['self'].board[6]) + '\n-+-+-\n') + __l['self'].board[7]) + '|') + __l['self'].board[8]) + '|') + __l['self'].board[9])), None)[1] for __l['self'] in [(self)]][0])({}), 'drawBoard')]][0] for __l['restart'], __l['restart'].__name__ in [(lambda self: (lambda __l: [(__print('Would you like to play again?\nIf so, type y'), [(lambda __after: (Game(), __after())[1] if ((__l['res'] == 'y') or (__l['res'] == 'Y')) else (sys.exit(), __after())[1])(lambda: None) for __l['res'] in [(input('> '))]][0])[1] for __l['self'] in [(self)]][0])({}), 'restart')]][0] for __l['__init__'], __l['__init__'].__name__ in [(lambda self: (lambda __l: [[[[[(__l['self'].start(), None)[1] for __l['self'].player in [(None)]][0] for __l['self'].moves in [([])]][0] for __l['self'].players in [({1: 'X', 2: 'O'})]][0] for __l['self'].board in [({1: ' ', 2: ' ', 3: ' ', 4: ' ', 5: ' ', 6: ' ', 7: ' ', 8: ' ', 9: ' '})]][0] for __l['self'] in [(self)]][0])({}), '__init__')]][0])({'__module__': __name__})))]][0] for __g['sys'] in [(__import__('sys', __g, __g))]][0])(__import__('builtins', level=0).__dict__['print'], __import__('types', level=0), __import__('operator', level=0), globals(), (lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))))